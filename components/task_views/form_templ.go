// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package task_views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/mjmarrazzo/maintenance-app/components/common/form"
	"github.com/mjmarrazzo/maintenance-app/domain"
	"strconv"
)

type FormProps struct {
	IsEdit   bool
	Task     *domain.Task
	AllTasks []*domain.Task
	// AllUsers     []*domain.User
}

func Form(props FormProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"p-4\"><h3 class=\"text-lg font-bold\" id=\"dialog-title\" hx-swap-oob=\"#dialog-title\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.IsEdit {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "Edit Task")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "Create Task")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</h3><form")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.IsEdit {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " hx-put=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/tasks/%d", props.Task.ID))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/task_views/form.templ`, Line: 28, Col: 52}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " hx-post=\"/tasks\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " hx-target=\"#task-modal-content\" hx-swap=\"outerHTML\" hx-indicator=\"#form-spinner\" hx-disabled-elt=\".modal-action button\" class=\"flex flex-col\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.Input(form.InputProps{
			ID:         "title",
			Label:      "Title",
			Value:      safeTask(props.Task).Title,
			Type:       "text",
			IsRequired: true,
			Hint:       "Required",
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.Input(form.InputProps{
			ID:         "description",
			Label:      "Description",
			Value:      safeTask(props.Task).Description,
			Type:       "text",
			IsRequired: false,
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.RemoteSelect(form.RemoteSelectProps{
			ID:          "category_id",
			Label:       "Category",
			IsRequired:  true,
			Hint:        "Required",
			Value:       strconv.FormatInt(safeTask(props.Task).CategoryID.Int64, 10),
			HxGet:       "/categories/select",
			HxTrigger:   "load, change",
			HxIndicator: ".category-loading-indicator",
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.RemoteSelect(form.RemoteSelectProps{
			ID:          "location_id",
			Label:       "Location",
			IsRequired:  true,
			Hint:        "Required",
			Value:       strconv.FormatInt(safeTask(props.Task).LocationID.Int64, 10),
			HxGet:       "/locations/select",
			HxTrigger:   "load, change",
			HxIndicator: ".location-loading-indicator",
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.PrioritySelect(safeTask(props.Task).Priority.String).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.StatusSelect(safeTask(props.Task).Status.String).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<!--\n                TODO: add assignee select later\n            -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.Date(form.DateProps{
			ID:         "estimated_completion_date",
			Label:      "Estimated Completion Date",
			Value:      safeTask(props.Task).EstimatedCompletionDate.Time,
			IsRequired: false,
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.Input(form.InputProps{
			ID:         "cost",
			Label:      "Cost",
			Value:      fmt.Sprintf("%.2f", safeTask(props.Task).Cost.Float64),
			Type:       "number",
			IsRequired: false,
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.RemoteSelect(form.RemoteSelectProps{
			ID:          "parent_task_id",
			Label:       "Parent Task",
			IsRequired:  false,
			Value:       strconv.FormatInt(safeTask(props.Task).ParentTaskID.Int64, 10),
			HxGet:       "/tasks/select",
			HxTrigger:   "load, change",
			HxIndicator: ".task-loading-indicator",
			ExcludedID:  strconv.FormatInt(safeTask(props.Task).ID, 10),
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<div class=\"form-control w-full flex flex-row items-center justify-between\"><label class=\"label\" for=\"is_recurring\">Recurring?</label> <input type=\"checkbox\" id=\"is_recurring\" name=\"is_recurring\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.IsEdit && props.Task.IsRecurring {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " checked=\"true\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, " onchange=\"document.getElementById(&#39;recurrence-wrapper&#39;).classList.toggle(&#39;hidden&#39;)\" class=\"toggle\"></div><div class=\"flex flex-col gap-4 hidden p-4 border-2 rounded-md border-base-300 mt-4\" id=\"recurrence-wrapper\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.RecurrenceTypeSelect(safeTask(props.Task).RecurrenceType.String).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, ")<script>\n\t\t\t\t\tdocument.getElementById('recurrence_type')?.addEventListener('change', function() {\n\t\t\t\t\t\tconsole.log(this)\n\t\t\t\t\t\tconst selectedValue = this.value;\n\t\t\t\t\t\tconst customWrapper = document.getElementById('recurrence-custom-wrapper');\n\t\t\t\t\t\tif (selectedValue === 'Custom') {\n\t\t\t\t\t\t\tcustomWrapper.classList.remove('hidden');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcustomWrapper.classList.add('hidden');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n                    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 = []any{"flex", "flex-col", "md:flex-row", "gap-4", templ.KV("hidden", safeTask(props.Task).RecurrenceType.String != string(domain.RecurrentTypeCustom))}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var3...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<div id=\"recurrence-custom-wrapper\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var3).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/task_views/form.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\"><div class=\"form-control w-full\"><label class=\"label\" for=\"recurrence_interval\">Recurrence Interval</label> <input id=\"recurrence_interval\" name=\"recurrence_interval\" type=\"number\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.IsEdit {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, " value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", props.Task.RecurrenceInterval))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/task_views/form.templ`, Line: 144, Col: 64}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, " class=\"input input-bordered w-full\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = form.RecurrenceUnitSelect(safeTask(props.Task).RecurrenceUnit.String).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "</div></div><div class=\"modal-action\"><button type=\"button\" class=\"btn\" onclick=\"task_modal.close()\">Cancel</button> <button type=\"submit\" class=\"btn btn-primary\">Save Changes <span id=\"form-spinner\" class=\"htmx-indicator\"><span class=\"loading loading-spinner loading-md\"></span></span></button></div></form></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func safeTask(task *domain.Task) *domain.Task {
	if task == nil {
		return &domain.Task{}
	}
	return task
}

var _ = templruntime.GeneratedTemplate
