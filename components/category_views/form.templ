package category_views

import (
	"fmt"
	"github.com/mjmarrazzo/maintenance-app/components/common/form"
	"github.com/mjmarrazzo/maintenance-app/domain"
)

type FormProps struct {
	IsEdit   bool
	Category *domain.Category
}

templ Form(props FormProps) {
	<h3 class="text-lg font-bold" id="dialog-title" hx-swap-oob="#dialog-title">
		if props.IsEdit {
			Edit Category
		} else {
			Create Category
		}
	</h3>
	<div class="p-4">
		<form
			if props.IsEdit {
				hx-put={ fmt.Sprintf("/categories/%d", props.Category.ID) }
			} else {
				hx-post="/categories"
			}
			hx-target="#category-modal-content"
			hx-swap="outerHTML"
			hx-indicator="#form-spinner"
			hx-disabled-elt=".modal-action button"
		>
			@form.Input(form.InputProps{
				ID:         "name",
				Label:      "Name",
				Value:      safeCategory(props.Category).Name,
				Type:       "text",
				IsRequired: true,
				Hint:       "Required",
			})
			@form.TextArea(form.TextAreaProps{
				ID:         "description",
				Label:      "Description",
				Value:      safeCategory(props.Category).Description,
				Rows:       3,
				IsRequired: false,
			})
			<div class="modal-action">
				<button type="button" class="btn" onclick="category_modal.close()">Cancel</button>
				<button type="submit" class="btn btn-primary">
					Save Changes
					<span id="form-spinner" class="htmx-indicator">
						<span class="loading loading-spinner loading-md"></span>
					</span>
				</button>
			</div>
		</form>
	</div>
}

func safeCategory(category *domain.Category) *domain.Category {
	if category == nil {
		return &domain.Category{}
	}
	return category
}
