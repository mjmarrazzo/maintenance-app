package location_views

import (
	"fmt"
	"github.com/mjmarrazzo/maintenance-app/components/common/form"
	"github.com/mjmarrazzo/maintenance-app/domain"
)

type FormProps struct {
	IsEdit       bool
	Location     *domain.Location
	AllLocations []*domain.Location
}

templ Form(props FormProps) {
	<div class="p-4">
		<h3 class="text-lg font-bold" id="dialog-title" hx-swap-oob="#dialog-title">
			if props.IsEdit {
				Edit Location
			} else {
				Create Location
			}
		</h3>
		<form
			if props.IsEdit {
				hx-put={ fmt.Sprintf("/locations/%d", props.Location.ID) }
			} else {
				hx-post="/locations"
			}
			hx-target="#location-modal-content"
			hx-swap="outerHTML"
			hx-indicator="#form-spinner"
			hx-disabled-elt=".modal-action button"
			class="flex flex-col gap-4"
		>
			@form.Input(form.InputProps{
				ID:         "name",
				Label:      "Name",
				Value:      safeLocation(props.Location).Name,
				Type:       "text",
				IsRequired: true,
				Hint:       "Required",
			})
			@form.TextArea(form.TextAreaProps{
				ID:         "description",
				Label:      "Description",
				Value:      safeLocation(props.Location).Description,
				Rows:       3,
				IsRequired: false,
			})
			@form.Select(form.SelectProps{
				ID:         "parent_location_id",
				Label:      "Parent Location",
				IsRequired: false,
			}) {
				if (len(props.AllLocations) == 0) {
					<option disabled selected>No locations</option>
				} else {
					<option value="" selected>None</option>
				}
				for _, location := range filterLocations(props.AllLocations, props.Location) {
					<option
						value={ fmt.Sprintf("%d", location.ID) }
						if props.IsEdit && props.Location.ParentLocationId.Int64 == location.ID {
							selected
						}
					>{ location.Name }</option>
				}
			}
			<div class="modal-action">
				<button type="button" class="btn" onclick="location_modal.close()">Cancel</button>
				<button type="submit" class="btn btn-primary">
					Save Changes
					<span id="form-spinner" class="htmx-indicator">
						<span class="loading loading-spinner loading-md"></span>
					</span>
				</button>
			</div>
		</form>
	</div>
}

func safeLocation(location *domain.Location) *domain.Location {
	if location == nil {
		return &domain.Location{}
	}
	return location
}

func filterLocations(locations []*domain.Location, excludeLocation *domain.Location) []*domain.Location {
	if excludeLocation == nil {
		return locations
	}
	var filteredLocations []*domain.Location
	for _, location := range locations {
		if location.ID != excludeLocation.ID {
			filteredLocations = append(filteredLocations, location)
		}
	}
	return filteredLocations
}
