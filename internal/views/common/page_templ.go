// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package common

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

var sidebar_entries = []struct {
	Name string
	Icon string
	Path templ.SafeURL
}{
	{"Home", "home", "/home"},
	{"Tasks", "clipboard-list", "/tasks"},
	{"Locations", "map-pin", "/locations"},
	{"Categories", "tag", "/categories"},
}

func Page(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"navbar shadow-sm sticky top-0 z-50 bg-base-100 h-16\"><div class=\"flex justify-between md:justify-start w-full items-center px-4\"><div class=\"flex-none md:hidden\"><button class=\"btn btn-square btn-ghost\" onclick=\"toggleSidebar()\"><i data-lucide=\"menu\"></i></button></div><div class=\"flex-1 flex justify-center md:justify-start\"><a href=\"/\" class=\"flex gap-4 flex-row items-center font-sans\"><img class=\"h-8 md:h-8\" src=\"/public/logo.png\"> <span class=\"text-2xl font-bold text-[#005f6e]\">Groundwork</span></a></div></div></div><div id=\"sidebar-backdrop\" class=\"fixed inset-0 bg-black opacity-20 z-40 hidden md:hidden\" onclick=\"toggleSidebar()\"></div><div class=\"flex\"><div id=\"sidebar\" class=\"fixed md:sticky top-16 h-[calc(100dvh-64px)] bg-base-100 w-80 shadow-md overflow-y-auto z-40 -left-80 md:left-0 transition-all duration-300\"><ul class=\"menu p-4 w-full\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, entry := range sidebar_entries {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<li class=\"[&amp;.active]:font-bold [&amp;.active]:bg-base-300\"><a href=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 templ.SafeURL = entry.Path
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var3)))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" class=\"flex gap-8 text-2xl w-full\"><i data-lucide=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(entry.Icon)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/common/page.templ`, Line: 38, Col: 35}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"></i> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(entry.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/common/page.templ`, Line: 39, Col: 20}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</a></li>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</ul></div><main class=\"flex-1 h-[calc(100dvh-64px)] overflow-y-auto p-8 w-full\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</main></div><div id=\"toast\" class=\"toast\"></div><script>\n\t\t\t\tfunction toggleSidebar() {\n\t\t\t\t\tconst sidebar = document.getElementById('sidebar');\n\t\t\t\t\tconst backdrop = document.getElementById('sidebar-backdrop');\n\n\t\t\t\t\tsidebar.classList.toggle('-left-80');\n\t\t\t\t\tsidebar.classList.toggle('left-0');\n\t\t\t\t\tbackdrop.classList.toggle('hidden');\n\t\t\t\t}\n\n\t\t\t\tfunction showToast(message, type) {\n\t\t\t\t\tconst toast = document.getElementById('toast');\n\t\t\t\t\tconst toastItem = document.createElement('div');\n\t\t\t\t\ttoastItem.className = `alert alert-${type} shadow-lg`;\n\t\t\t\t\ttoastItem.appendChild(document.createTextNode(message));\n\t\t\t\t\ttoast.appendChild(toastItem);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttoastItem.remove();\n\t\t\t\t\t}, 30000);\n\t\t\t\t}\n\n\t\t\t\tfunction toggleActiveNavEntry() {\n\t\t\t\t\tconst currentPath = window.location.pathname;\n\t\t\t\t\tconst activeLi = document.querySelector(`#sidebar a[href^=\"${currentPath}\"]`);\n\t\t\t\t\tif (activeLi) {\n\t\t\t\t\t\tactiveLi.parentElement.classList.add('active');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttoggleActiveNavEntry();\n\n\t\t\t\tdocument.addEventListener('htmx:beforeSwap', function(event) {\n\t\t\t\t\tif (event.detail.xhr.status === 400 || event.detail.xhr.status === 422) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = JSON.parse(event.detail.xhr.responseText);\n\n\t\t\t\t\t\t\tconst form = event.detail.requestConfig.elt;\n\n\t\t\t\t\t\t\tif (response.code === \"INVALID_FORMAT\" && response.violations) {\n\t\t\t\t\t\t\t\tevent.detail.shouldSwap = false;\n\n\t\t\t\t\t\t\t\tresponse.violations.forEach(violation => {\n\t\t\t\t\t\t\t\t\tconst field = form.querySelector(`[name=\"${violation.name}\"]`);\n\t\t\t\t\t\t\t\t\tif (field) {\n\t\t\t\t\t\t\t\t\t\tconst errorContainer = field.nextElementSibling;\n\t\t\t\t\t\t\t\t\t\tif (errorContainer && errorContainer.classList.contains('validator-hint')) {\n\t\t\t\t\t\t\t\t\t\t\tconst errorMessage = violation.message ?? \"Invalid input\";\n\n\t\t\t\t\t\t\t\t\t\t\tconst oldError = errorContainer.textContent;\n\t\t\t\t\t\t\t\t\t\t\terrorContainer.textContent = errorMessage;\n\t\t\t\t\t\t\t\t\t\t\tfield.setCustomValidity(errorMessage)\n\n\t\t\t\t\t\t\t\t\t\t\tfield.addEventListener('input', function() {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.setCustomValidity('');\n\t\t\t\t\t\t\t\t\t\t\t\terrorContainer.textContent = oldError;\n\t\t\t\t\t\t\t\t\t\t\t}, { once: true });\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tconsole.log(\"Error parsing response:\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = BaseHtml(title).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
