package common

var sidebar_entries = []struct {
	Name string
	Icon string
	Path templ.SafeURL
}{
	{"Home", "home", "/"},
	{"Tasks", "clipboard-list", "/tasks"},
	{"Locations", "map-pin", "/locations"},
	{"Categories", "tag", "/categories"},
}

templ Page(title string) {
	<!DOCTYPE html>
	<html>
		<head>
			<link rel="icon" href="/public/favicon.ico" type="image/x-icon"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<script src="/public/htmx.min.js"></script>
			<link href="/public/tailwind.css" rel="stylesheet"/>
			<script src="https://unpkg.com/lucide@0.488.0"></script>
			<style>
				.htmx-indicator:not(.htmx-request) {
					display: none;
				}
			</style>
		</head>
		<body class="h-full">
			<div class="navbar shadow-sm sticky top-0 z-50 bg-base-100 h-16">
				<div class="flex justify-between md:justify-start w-full items-center px-4">
					<div class="flex-none md:hidden">
						<button class="btn btn-square btn-ghost" onclick="toggleSidebar()">
							<i data-lucide="menu"></i>
						</button>
					</div>
					<div class="flex-1 flex justify-center md:justify-start">
						<a href="/" class="flex gap-4 flex-row items-center font-sans">
							<img class="h-8 md:h-8" src="/public/logo.png"/>
							<span class="text-2xl font-bold text-[#005f6e]">Groundwork</span>
						</a>
					</div>
				</div>
			</div>
			<div id="sidebar-backdrop" class="fixed inset-0 bg-black opacity-20 z-40 hidden md:hidden" onclick="toggleSidebar()"></div>
			<div class="flex">
				<div id="sidebar" class="fixed md:sticky top-16 h-[calc(100dvh-64px)] bg-base-100 w-80 shadow-md overflow-y-auto z-40 -left-80 md:left-0 transition-all duration-300">
					<ul class="menu p-4 w-full">
						for _, entry := range sidebar_entries {
							<li class="[&.active]:font-bold [&.active]:bg-base-300">
								<a href={ entry.Path } class="flex gap-8 text-2xl w-full">
									<i data-lucide={ entry.Icon }></i>
									{ entry.Name }
								</a>
							</li>
						}
					</ul>
				</div>
				<main class="flex-1 h-[calc(100dvh-64px)] overflow-y-auto p-8 w-full">
					{ children... }
				</main>
			</div>
			<div id="toast" class="toast"></div>
			<script>
				lucide.createIcons();

				function toggleSidebar() {
					const sidebar = document.getElementById('sidebar');
					const backdrop = document.getElementById('sidebar-backdrop');

					sidebar.classList.toggle('-left-80');
					sidebar.classList.toggle('left-0');
					backdrop.classList.toggle('hidden');
				}

				function showToast(message, type) {
					const toast = document.getElementById('toast');
					const toastItem = document.createElement('div');
					toastItem.className = `alert alert-${type} shadow-lg`;
					toastItem.appendChild(document.createTextNode(message));
					toast.appendChild(toastItem);
					setTimeout(() => {
						toastItem.remove();
					}, 30000);
				}

				function toggleActiveNavEntry() {
					const currentPath = window.location.pathname;
					const activeLi = document.querySelector(`#sidebar a[href^="${currentPath}"]`);
					if (activeLi) {
						activeLi.parentElement.classList.add('active');
					}
				}
				toggleActiveNavEntry();

				document.addEventListener('htmx:beforeSwap', function(event) {
					if (event.detail.xhr.status === 400 || event.detail.xhr.status === 422) {
						try {
							const response = JSON.parse(event.detail.xhr.responseText);

							const form = event.detail.requestConfig.elt;

							if (response.code === "INVALID_FORMAT" && response.violations) {
								event.detail.shouldSwap = false;

								response.violations.forEach(violation => {
									const field = form.querySelector(`[name="${violation.name}"]`);
									if (field) {
										const errorContainer = field.nextElementSibling;
										if (errorContainer && errorContainer.classList.contains('validator-hint')) {
											const errorMessage = violation.message ?? "Invalid input";

											const oldError = errorContainer.textContent;
											errorContainer.textContent = errorMessage;
											field.setCustomValidity(errorMessage)

											field.addEventListener('input', function() {
												this.setCustomValidity('');
												errorContainer.textContent = oldError;
											}, { once: true });
										}
									}
								});

								return false;
							}
						} catch (e) {
							console.log("Error parsing response:", e);
						}
					}
				});
			</script>
		</body>
	</html>
}
