package category_views

import (
	"fmt"
	"github.com/mjmarrazzo/maintenance-app/internal/domain"
	"github.com/mjmarrazzo/maintenance-app/internal/views/common"
	"github.com/mjmarrazzo/maintenance-app/internal/views/components"
)

type ListProps struct {
	Categories []*domain.Category
}

templ List(props ListProps) {
	@common.Page("Categories") {
		<div class="card card-lg card-border shadow-md w-full mx-auto">
			<div class="card-body">
				<div class="card-title justify-between">
					<h2 class="text-2xl font-bold">Categories</h2>
					<button
						class="btn btn-primary self-end"
						hx-get="/categories/form"
						hx-target="#category-modal-content"
						onclick="category_modal.showModal()"
					>
						<span class="hidden md:inline">Create Task</span>
						<i data-lucide="plus" class="md:hidden"></i>
					</button>
				</div>
				<ul class="list">
					for i, category := range props.Categories {
						<li
							class="list-row animate-slide-in opacity-0"
							style={ getListStyle(i) }
						>
							<div class="list-col-grow">
								<div class="text-lg font-bold">
									{ category.Name }
								</div>
								<div class="opacity-60">
									{ category.Description }
								</div>
							</div>
							<div class="flex flex-col gap-2 lg:flex-row lg:gap-4">
								<button
									class="btn btn-square btn-ghost"
									hx-get={ fmt.Sprintf("/categories/%d/form", category.ID) }
									hx-target="#category-modal-content"
									hx-on::after-request="
									if(event.detail.failed) {
										showToast('Failed to load form', 'error');
										category_modal.close();
									}
								"
									onclick="category_modal.showModal()"
								>
									<i data-lucide="pencil"></i>
								</button>
								<button
									class="btn btn-square btn-ghost"
									hx-delete={ fmt.Sprintf("/categories/%d", category.ID) }
									hx-on::after-request="
									if(event.detail.failed) {
										showToast('Failed to delete category', 'error');
									}
								"
									hx-confirm={ fmt.Sprintf("Are you sure you want to delete the '%s' category?", category.Name) }
								>
									<i data-lucide="trash-2" class="text-red-500"></i>
								</button>
							</div>
						</li>
					}
				</ul>
			</div>
		</div>
		@components.Dialog(components.DialogProps{
			ID:        "category_modal",
			ContentID: "category-modal-content",
		})
	}
}

func getListStyle(i int) map[string]string {
	return map[string]string{
		"animation-delay":     fmt.Sprintf("%dms", i*75),
		"animation-fill-mode": "forwards",
	}
}
