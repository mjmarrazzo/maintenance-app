package task_views

import (
	"fmt"
	"github.com/mjmarrazzo/maintenance-app/internal/domain"
	"github.com/mjmarrazzo/maintenance-app/internal/views/components/form"
	"strconv"
)

type FormProps struct {
	IsEdit   bool
	Task     *domain.Task
	AllTasks []*domain.Task
	// AllUsers     []*domain.User
}

templ Form(props FormProps) {
	<div class="p-4">
		<h3 class="text-lg font-bold" id="dialog-title" hx-swap-oob="#dialog-title">
			if props.IsEdit {
				Edit Task
			} else {
				Create Task
			}
		</h3>
		<form
			if props.IsEdit {
				hx-put={ fmt.Sprintf("/tasks/%d", props.Task.ID) }
			} else {
				hx-post="/tasks"
			}
			hx-target="#task-modal-content"
			hx-swap="outerHTML"
			hx-indicator="#form-spinner"
			hx-disabled-elt=".modal-action button"
			class="flex flex-col"
		>
			@form.Input(form.InputProps{
				ID:         "title",
				Label:      "Title",
				Value:      safeTask(props.Task).Title,
				Type:       "text",
				IsRequired: true,
				Hint:       "Required",
			})
			@form.Input(form.InputProps{
				ID:         "description",
				Label:      "Description",
				Value:      safeTask(props.Task).Description,
				Type:       "text",
				IsRequired: false,
			})
			@form.RemoteSelect(form.RemoteSelectProps{
				ID:          "category_id",
				Label:       "Category",
				IsRequired:  true,
				Hint:        "Required",
				Value:       strconv.FormatInt(safeTask(props.Task).CategoryID.Int64, 10),
				HxGet:       "/categories/select",
				HxTrigger:   "load, change",
				HxIndicator: ".category-loading-indicator",
			})
			@form.RemoteSelect(form.RemoteSelectProps{
				ID:          "location_id",
				Label:       "Location",
				IsRequired:  true,
				Hint:        "Required",
				Value:       strconv.FormatInt(safeTask(props.Task).LocationID.Int64, 10),
				HxGet:       "/locations/select",
				HxTrigger:   "load, change",
				HxIndicator: ".location-loading-indicator",
			})
			@form.PrioritySelect(safeTask(props.Task).Priority.String)
			@form.StatusSelect(safeTask(props.Task).Status.String)
			<!--
                TODO: add assignee select later
            -->
			@form.Date(form.DateProps{
				ID:         "estimated_completion_date",
				Label:      "Estimated Completion Date",
				Value:      safeTask(props.Task).EstimatedCompletionDate.Time,
				IsRequired: false,
			})
			@form.Input(form.InputProps{
				ID:         "cost",
				Label:      "Cost",
				Value:      fmt.Sprintf("%.2f", safeTask(props.Task).Cost.Float64),
				Type:       "number",
				IsRequired: false,
			})
			@form.RemoteSelect(form.RemoteSelectProps{
				ID:          "parent_task_id",
				Label:       "Parent Task",
				IsRequired:  false,
				Value:       strconv.FormatInt(safeTask(props.Task).ParentTaskID.Int64, 10),
				HxGet:       "/tasks/select",
				HxTrigger:   "load, change",
				HxIndicator: ".task-loading-indicator",
				ExcludedID:  strconv.FormatInt(safeTask(props.Task).ID, 10),
			})
			<div class="form-control w-full flex flex-row items-center justify-between">
				<label class="label" for="is_recurring">
					Recurring?
				</label>
				<input
					type="checkbox"
					id="is_recurring"
					name="is_recurring"
					if props.IsEdit && props.Task.IsRecurring {
						checked="true"
					}
					onchange="document.getElementById('recurrence-wrapper').classList.toggle('hidden')"
					class="toggle"
				/>
			</div>
			<div class="flex flex-col gap-4 hidden p-4 border-2 rounded-md border-base-300 mt-4" id="recurrence-wrapper">
				@form.RecurrenceTypeSelect(safeTask(props.Task).RecurrenceType.String)
				)
				<script>
					document.getElementById('recurrence_type')?.addEventListener('change', function() {
						console.log(this)
						const selectedValue = this.value;
						const customWrapper = document.getElementById('recurrence-custom-wrapper');
						if (selectedValue === 'Custom') {
							customWrapper.classList.remove('hidden');
						} else {
							customWrapper.classList.add('hidden');
						}
					});
                    </script>
				<div
					id="recurrence-custom-wrapper"
					class={ "flex", "flex-col", "md:flex-row", "gap-4", templ.KV("hidden", safeTask(props.Task).RecurrenceType.String != string(domain.RecurrentTypeCustom)) }
				>
					<div class="form-control w-full">
						<label class="label" for="recurrence_interval">
							Recurrence Interval
						</label>
						<input
							id="recurrence_interval"
							name="recurrence_interval"
							type="number"
							if props.IsEdit {
								value={ fmt.Sprintf("%d", props.Task.RecurrenceInterval) }
							}
							class="input input-bordered w-full"
						/>
					</div>
					@form.RecurrenceUnitSelect(safeTask(props.Task).RecurrenceUnit.String)
				</div>
			</div>
			<div class="modal-action">
				<button type="button" class="btn" onclick="task_modal.close()">Cancel</button>
				<button type="submit" class="btn btn-primary">
					Save Changes
					<span id="form-spinner" class="htmx-indicator">
						<span class="loading loading-spinner loading-md"></span>
					</span>
				</button>
			</div>
		</form>
	</div>
}

func safeTask(task *domain.Task) *domain.Task {
	if task == nil {
		return &domain.Task{}
	}
	return task
}
